// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  name          String
  email         String          @unique
  passwordHash  String
  role          Role            @default(USER)
  desactivated  Boolean         @default(false)
  follows       Follow[]
  savedNews     SavedNews[]
  PasswordReset PasswordReset[]

  @@map("users")
}

model University {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  name        String   @unique
  location    String
  url         String   @unique
  description String
  image       String
  miniature   String?
  follows     Follow[]

  @@map("universities")
}

model News {
  link        String      @id @map("_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")
  title       String
  description String
  image       String
  author      String
  published   DateTime
  created     DateTime
  category    String[]
  enclosures  Json?
  media       Json?
  savedBy     SavedNews[]

  @@map("news")
}

model Follow {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime   @default(now()) @map("created_at")
  userId       String     @db.ObjectId
  universityId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  university   University @relation(fields: [universityId], references: [id])

  @@unique([userId, universityId])
  @@map("follows")
}

model SavedNews {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  newsUrl String
  user    User   @relation(fields: [userId], references: [id])
  news    News   @relation(fields: [newsUrl], references: [link])

  @@unique([userId, newsUrl])
  @@map("saved_news")
}

model PasswordReset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@map("password_resets")
}
